Traverselisp Manual

Traverse is a library of recursive search functions in Emacs.

-----

* Installation

Put the file traverselisp.el in your Load path.

Write in your init-file (.emacs):

<code>
(require 'traverselisp)
</code>

-----

* Configuration

** Exemple of Config

<code>

(require 'traverselisp)

(setq traverse-use-avfs t)

(global-set-key (kbd "<f5> f") 'traverse-deep-rfind)

(global-set-key (kbd "<f5> u") 'traverse-build-tags-in-project)

(global-set-key (kbd "C-c o") 'traverse-occur-current-buffer)

(define-key dired-mode-map (kbd "A") 'traverse-dired-search-regexp-in-anything-at-point)

(define-key dired-mode-map (kbd "C-c C-z") 'traverse-dired-browse-archive)

(define-key dired-mode-map (kbd "C-c t") 'traverse-dired-find-in-all-files)

(add-to-list 'traverse-ignore-files ".ledger-cache")

</code>

** Variables

-----

* Functions

-----

* Keymap

Use C-h m as usual while in a traverse buffer.

-----


* Usage

** Settings

There is at list 2 important variables to visit and eventually to set:


 - *traverse-ignore-files* ==> this is a list of files to ignore.

 - *traverse-ignore-dirs* ==> this is a list of directories to ignore.

They are already set with default values, you may want to modify that.

** Searching

*** Search in a Whole tree

<code>

M-x traverse-deep-rfind

</code>

=(traverse-deep-rfind tree regexp &optional only)=

Main function that call walk, if only is omitted it

will be set as nil and search will be proceeded on all files

except on files that are in `traverse-ignore-files'

Called with prefix-argument (C-u) absolute path is displayed


*** Search in a file

<code>

M-x traverse-find-in-file

</code>

=(traverse-find-in-file fname regexp &optional full-path)=

Traverse search regex in a single file

*** Search in a buffer

*(traverse-occur-current-buffer regexp)*

Search regexp in current buffer

*** Search from Dired

All the precedent functions can be called from dired.

The function:

 - *traverse-dired-search-regexp-in-anything-at-point*

Will search regexp in file at point in dired buffer

or

if files are marked, it will search in these files.

or

if file at point is a directory, will use `traverse-deep-rfind' on this directory.

NOTE: if directories are marked, they are ignored.


 - *traverse-dired-find-in-all-files*


=(traverse-dired-find-in-all-files regexp &optional full-path)=

Traverse search regex in all files of current dired buffer

except compressed files and symlinks.
  

*** Search in archives

Traverse use AVFS to search in compressed archives.

To do that, you have first to install *avfs*  and *fuse* on your system:

http://sourceforge.net/projects/avf

Then you can open and browse archive in dired with:

=(traverse-dired-browse-archive)=

This function use AVFS and FUSE, so be sure
to have these programs and modules installed on your system


** Navigating From traverse buffer

Principal command are:

N ==> find next occurence in other buffer.

P ==> find precedent occurence in other buffer.

R ==> call another menu for interactive replacement.

S ==> replace regexp in current line with new regexp.


** Replacing

*** Replace in just one line

*** Replace all

** Creating Tag file in project

(traverse-build-tags-in-project dir ext &optional new-file)

Build an etags file in current project.
If `new-file' is non-nil (do it with C-u) build a new file
instead of appending to the current one.
Many file extensions can be enter at `ext' prompt.
Tag file will be build in `dir'

** Moving files of all subdirs to one dir
 
traverse-cp-or-mv-extfiles-in-dir is an interactive compiled Lisp
function in `traverselisp.el'.

(traverse-cp-or-mv-extfiles-in-dir tree ext dir &optional (fn (quote
copy-file)))

Recurse in `tree' and copy/move all files with `ext' in `dir'.
Default is copying, called with prefix-arg (C-u) Move files with `ext' in `Dir'.
`func' is a symbol when called non-interactively.

Note: `dir' will be use as target and NO search inside it will be performed.
If you want to move/copy files that are nested in subdir(s) of `dir'
It will fail silently.==> So use another dir target

If `dir' exists and is not empty, it will be synch with the newest files
found in `tree'


-----
 
* Using traverselisp in anything

Using traverselisp in anything is great and fast.

It provide two methods:

 - In a buffer

If you are working in a buffer (file, scratch, slime etc..)

it will search for regex in this buffer.

 - In a Dired buffer

Search will be performed on ALL files of current-directory (no recursion in subdir)

You can navigate from file to file in anything-buffer. (M-n/M-p)

-----
